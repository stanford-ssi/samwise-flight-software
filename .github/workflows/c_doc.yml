name: claude (docs + changelog on command)

on:
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: read # Set to READ-ONLY
  pull-requests: read # Set to READ-ONLY
  issues: read # Set to READ-ONLY
  id-token: write

concurrency:
  group: claude-docs-changelog-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  run_on_command:
    # Only run if:
    # 1. The actor is a trusted user.
    # 2. The comment/review contains the specific command '@claude docs' OR '@claude changelog'.
    if: |
      contains(fromJSON('["devYaoYH", "carter-cochran"]'), github.actor) &&
      (
        contains(github.event.comment.body || github.event.review.body || '', '@claude docs') ||
        contains(github.event.comment.body || github.event.review.body || '', '@claude changelog')
      )
    runs-on: ubuntu-latest

    env:
      # Globs defining which files Claude is allowed to modify/update
      README_GLOBS: "README.md,**/README.md,docs/**/*.md,CHANGELOG.md"
      MAX_OUTPUT_TOKENS: "900"

    steps:
      - name: Get PR context
        id: pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # 1. Safely derive PR number from issue_comment, pull_request_review, or pull_request_review_comment events.
          pr_num=${{ github.event.issue.number || github.event.pull_request.number || github.event.pull_request_review_comment.pull_request.number }}
          if [ -z "$pr_num" ]; then
            echo "::error::Could not determine PR number for this event. Skipping."
            exit 1
          fi

          pr_json=$(gh api repos/${{ github.repository }}/pulls/$pr_num)
          
          echo "number=$pr_num" >> $GITHUB_OUTPUT
          echo "head_sha=$(jq -r '.head.sha' <<< "$pr_json")" >> $GITHUB_OUTPUT
          echo "base_ref=$(jq -r '.base.ref' <<< "$pr_json")" >> $GITHUB_OUTPUT
          # Forcing can_push to 'false' due to read-only permissions (ensures comment-only output).
          echo "can_push=false" >> $GITHUB_OUTPUT
          
          # 2. Model selection: FORCING the use of the cheaper Haiku model as requested.
          model='claude-4-5-haiku-latest'
          echo "model=$model" >> $GITHUB_OUTPUT

      - name: Checkout PR HEAD
        uses: actions/checkout@v4
        with:
          # FOR INITIAL TESTING: Lowered fetch-depth to 5 for faster checkout time. 
          # This should be increased back to 50 or 0 for production use.
          fetch-depth: 5
          ref: ${{ steps.pr.outputs.head_sha }}

      - name: Get changed documentation files
        id: files
        run: |
          # Fetch the base branch to perform an accurate diff
          git fetch origin ${{ steps.pr.outputs.base_ref }}
          
          # Get a list of ALL changed files (including non-doc files)
          all_changed_files=$(git diff --name-only origin/${{ steps.pr.outputs.base_ref }}..${{ steps.pr.outputs.head_sha }})
          
          # Calculate the total number of files changed in the PR (code + docs)
          total_changed_count=$(echo "$all_changed_files" | grep -c .)

          # Filter changed files against the defined documentation globs to determine ALLOWED_FILES
          IFS=',' read -ra globs <<< "${{ env.README_GLOBS }}"
          filtered_doc_files=()
          while IFS= read -r file; do
            for glob in "${globs[@]}"; do
              if [[ "$file" == $glob ]]; then
                filtered_doc_files+=("$file")
                break
              fi
            done
          done <<< "$all_changed_files"
          
          # Write the list of actual documentation files to be used by Claude
          printf "%s\n" "${filtered_doc_files[@]}" > filtered_files.txt

          # MODIFIED LOGIC: If ANY file was changed (total_changed_count > 0), force count to 1.
          # This ensures the Claude action runs and can generate documentation for new features, 
          # even if no EXISTING documentation file was modified.
          if [ "$total_changed_count" -gt 0 ]; then
            echo "count=1" >> $GITHUB_OUTPUT
          else
            echo "count=0" >> $GITHUB_OUTPUT
          fi

      - name: Run Claude for docs/changelog
        if: steps.files.outputs.count != '0'
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ github.token }}
          pr_number: ${{ steps.pr.outputs.number }}
          trigger_phrase: "@claude"
          model: ${{ steps.pr.outputs.model }}
          
          # Custom instructions that guide Claude's behavior for this specific task
          custom_instructions: |
            You are the repository's Documentation & Changelog Maintainer.

            Context:
            - Triggered from PR #${{ steps.pr.outputs.number }} in ${{ github.repository }}.
            - The original command was: "${{ github.event.comment.body || github.event.review.body }}"
            - Repo root and PR diff are checked out in the workspace.

            - Allowed Files for Modification (derived from PR diff & globs):
              ---
              {{ALLOWED_FILES}}
              ---

            Capabilities:
            - **Policy Update:** This action is configured to only read and propose changes.
            - **DO NOT** modify or commit files directly to the PR branch.
            - Instead, you **MUST** post a PR comment containing a single fenced unified diff.

            Tasks:
            1) If the command includes "docs" or "doc":
              - Inspect the PR's diff to detect all user-visible changes (APIs, CLI flags, behavior, etc.).
              - **Goal: Generate/Update Documentation.** For every file or module affected by the PR, propose documentation updates.
                - If a relevant documentation file exists (e.g., in ${{ env.README_GLOBS }}), propose an update to reflect the changes.
                - If new user-facing code is added without existing documentation, propose the creation of a **new, complete README equivalent paragraph/section** detailing its purpose, usage, and examples.
              - Tone: factual, concise.

            2) If the command includes "changelog" or "change log":
              - Update or create CHANGELOG.md per "Keep a Changelog" (Added/Changed/Fixed/etc.).
              - Summarize PR's user-facing changes in terse bullets (1â€“2 lines), including "(#${{ steps.pr.outputs.number }})" and @contributors.
              - If no user-visible changes, add a note under "Changed" or skip.

            Safety & Style:
            - Keep edits minimal and surgical; preserve the author's voice where possible.
            - Do not touch files outside the ALLOWED_FILES list.
            - Preserve markdown formatting, links, and table structures.

            Output Policy (Strict):
            - Post a PR comment containing ONLY a summary paragraph followed by a single ```diff fence.

          extra_context: |
            ALLOWED_FILES<<EOF
            $(cat filtered_files.txt)
            EOF

          claude_args: |
            --maxOutputTokens "${{ env.MAX_OUTPUT_TOKENS }}"
            # Tool to allow Claude to post inline comments on PRs/Issues (used for the diff output)
            --allowedTools "mcp__github_inline_comment__create_inline_comment"

      - name: No documentation changes detected
        if: steps.files.outputs.count == '0'
        run: echo "No relevant changes or files detected; skipping Claude run."
